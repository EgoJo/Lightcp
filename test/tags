!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Addfd	Test.h	/^int Addfd(int epollfd, int fd){$/;"	f
BACKLOG	ClientTest.cpp	/^const int BACKLOG = 5;$/;"	v
BACKLOG	Test.h	/^const int BACKLOG = 5;$/;"	v
BLOCKQUEUE_H	Test.h	14;"	d
BUF_SIZE	ClientTest.cpp	/^const int BUF_SIZE = 1024;$/;"	v
BUF_SIZE	Test.h	/^const int BUF_SIZE = 1024;$/;"	v
CharFun	StringTest.cpp	/^void CharFun(char *ch){}$/;"	f
IP	ClientTest.cpp	/^const char* IP = "127.0.0.1";$/;"	v
IP	Test.h	/^const char* IP = "127.0.0.1";$/;"	v
MAX_EVENT_NUMBER	Test.h	/^const int MAX_EVENT_NUMBER = 5;$/;"	v
PORT	ClientTest.cpp	/^const int PORT = 12345;$/;"	v
PORT	Test.h	/^const int PORT = 12345;$/;"	v
SetNoBlocking	Test.h	/^int SetNoBlocking(int fd){$/;"	f
SocketServer	Test.h	/^int SocketServer(){$/;"	f
StringFun	StringTest.cpp	/^void StringFun(string& str){}$/;"	f
TEST_NUM	Test.cpp	/^const int TEST_NUM = 1000;$/;"	v
THREAD_NUM	ThreadTest.cpp	/^const int THREAD_NUM = 10;$/;"	v
Test	BlockQueueTest.cpp	/^class Test$/;"	c	file:
Test	Test.cpp	/^class Test$/;"	c	file:
a	BlockQueueTest.cpp	/^	int a, b, c;$/;"	m	class:Test	file:
a	Test.cpp	/^	int a, b, c;$/;"	m	class:Test	file:
b	BlockQueueTest.cpp	/^	int a, b, c;$/;"	m	class:Test	file:
b	Test.cpp	/^	int a, b, c;$/;"	m	class:Test	file:
blockQueue	ThreadTest.cpp	/^BlockQueue<int> blockQueue;$/;"	v
bqueue	BlockQueueTest.cpp	/^BlockQueue<Test> bqueue;$/;"	v
c	BlockQueueTest.cpp	/^	int a, b, c;$/;"	m	class:Test	file:
c	Test.cpp	/^	int a, b, c;$/;"	m	class:Test	file:
cond	ThreadTest.cpp	/^static pthread_cond_t cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
f	Test.cpp	/^	void f(){$/;"	f	class:Test
main	AlarmTest.cpp	/^int main(){$/;"	f
main	BlockQueueTest.cpp	/^int main(){$/;"	f
main	ClientTest.cpp	/^int main(){$/;"	f
main	StringTest.cpp	/^int main(){$/;"	f
main	Test.cpp	/^int main(){$/;"	f
main	ThreadTest.cpp	/^int main(){$/;"	f
multi_test	BlockQueueTest.cpp	/^void multi_test(){$/;"	f
mutex	ThreadTest.cpp	/^static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
sig_fun	AlarmTest.cpp	/^void sig_fun(int abc){$/;"	f
test_fun	Test.cpp	/^void test_fun(){$/;"	f
test_normal	Test.cpp	/^void test_normal(int *test_array, int test_size){	$/;"	f
test_pool	Test.cpp	/^void test_pool(int *test_array, int test_size, int pool_size){	$/;"	f
test_pop	BlockQueueTest.cpp	/^void* test_pop(void *arg){$/;"	f
test_push	BlockQueueTest.cpp	/^void* test_push(void *arg){$/;"	f
thread_fun	ThreadTest.cpp	/^void* thread_fun(void* arg){$/;"	f
